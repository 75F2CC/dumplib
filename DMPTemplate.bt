//--------------------------------------
//--- 010 Editor Binary Template
//
// File:     
// Author:   nforest@k33nteam.org
// Purpose:  Parse x86/x64 Windows Kernel Dump, dmp

// Reference:
// http://computer.forensikblog.de/files/010_templates/DMP.bt
// http://computer.forensikblog.de/en/2006/03/dmp-file-structure.html
// http://computer.forensikblog.de/en/2008/02/64bit-crash-dumps.html
//--------------------------------------

typedef enum <uint32> {
	FULL = 1,
	KERNEL,
	SMALL,
	TRIAGE
} e_DumpType;


// ===================================================================


typedef struct {
	uint32				BasePage <format=hex>;
	uint32				PageCount <format=hex>;
} _PHYSICAL_MEMORY_RUN32;


typedef struct {
	uint32				NumberOfRuns;
	uint32				NumberOfPages <format=hex>;
    if (NumberOfRuns != 0x45474150)
    {
        _PHYSICAL_MEMORY_RUN32		Run[NumberOfRuns];
    } 
} _PHYSICAL_MEMORY_DESCRIPTOR32;

typedef struct {
	uint32				ContextFlags <format=hex>;
	uint32				Dr0 <format=hex>;
	uint32				Dr1 <format=hex>;
	uint32				Dr2 <format=hex>;
	uint32				Dr3 <format=hex>;
	uint32				Dr6 <format=hex>;
	uint32				Dr7 <format=hex>;
	uchar				_reserved0[112];
	uint32				SegGs <format=hex>;
	uint32				SegFs <format=hex>;
	uint32				SegEs <format=hex>;
	uint32				SegDs <format=hex>;
	uint32				Edi <format=hex>;
	uint32				Esi <format=hex>;
	uint32				Ebx <format=hex>;
	uint32				Edx <format=hex>;
	uint32				Ecx <format=hex>;
	uint32				Eax <format=hex>;
	uint32				Ebp <format=hex>;
	uint32				Eip <format=hex>;
	uint32				SegCs <format=hex>;
	uint32				EFlags <format=hex>;
	uint32				Esp <format=hex>;
	uint32				SegSs <format=hex>;
	uint32				ExtendedRegisters <format=hex>;
} _CONTEXT32;

typedef struct {
	int32				ExceptionCode <format=hex>;
	uint32				ExceptionFlags  <format=hex>;
	uint32				ExceptionRecord;
	uint32				ExceptionAddress <format=hex>;
	uint32				NumberParameters;
	uint32				ExceptionInformation[15] <format=hex>;
} _EXCEPTION_RECORD32;


typedef struct {
	char				Signature[4];
	char				ValidDump[4];
	uint32				MajorVersion;
	uint32				MinorVersion;
	uint32				DirectoryTableBase <format=hex>;
	uint32				PfnDataBase <format=hex>;
	uint32				PsLoadedModuleList <format=hex>;
	uint32				PsActiveProcessHead <format=hex>;
	uint32				MachineImageType <format=hex>;
	uint32				NumberProcessors;
	uint32				BugCheckCode <format=hex>;
	uint32				BugCheckParameter[4] <format=hex>;
	char 				VersionUser[32];
	uchar				PaeEnabled;
	uchar				KdSecondaryVersion;
	uchar				Spare3[2];
	uint32				KdDebuggerDataBlock <format=hex>;
	_PHYSICAL_MEMORY_DESCRIPTOR32	PhysicalMemoryBlock;

	FSeek(2000);
	// just for test
	_EXCEPTION_RECORD32		Exception;
	char				Comment[128];
	uchar				_reserved0[1768];
	e_DumpType			DumpType;
	uint32				MiniDumpFields;
	uint32				SecondaryDataState;
	uint32				ProductType;
	uint32				SuiteMask;
	uint32				WriterStatus;
	int64				RequiredDumpSpace;
	uchar				_reserved2[16];
	FILETIME			SystemUpTime;	// not really a FILETIME!
	FILETIME			SystemTime;
	uchar				_reserved3[56];
	// size is 0x1000 bytes
} DUMP_HEADER32;

typedef struct {
    uint32 ServicePackBuild;
    uint32 SizeOfDump;
    uint32 ValidOffset <format=hex>;
    uint32 ContextOffset <format=hex>;
    uint32 ExceptionOffset <format=hex>;
    uint32 MmOffset <format=hex>;
    uint32 UnloadedDriversOffset <format=hex>;
    uint32 PrcbOffset <format=hex>;
    uint32 ProcessOffset <format=hex>;
    uint32 ThreadOffset <format=hex>;
    uint32 CallStackOffset <format=hex>;
    uint32 SizeOfCallStack;
    uint32 DriverListOffset <format=hex>;
    uint32 DriverCount;
    uint32 StringPoolOffset <format=hex>;
    uint32 StringPoolSize <format=hex>;
    uint32 BrokenDriverOffset <format=hex>;
    uint32 TriageOptions;
    uint32 TopOfStack <format=hex>;
    FSkip(12);
    uint32 DebuggerDataOffset <format=hex>;
    uint32 DebuggerDataSize;
    uint32 DataBlocksOffset <format=hex>;
    uint32 DataBlocksCountuint32;
} TRIAGE_DUMP_HEADER32;

// ===================================================================


typedef struct {
	uint64				BasePage <format=hex>;
	uint64				PageCount <format=hex>;
} _PHYSICAL_MEMORY_RUN64;


typedef struct {
	uint64				NumberOfRuns;
	uint64				NumberOfPages <format=hex>;
    if (NumberOfRuns != 0x4547415045474150)
    {
        _PHYSICAL_MEMORY_RUN64		Run[NumberOfRuns];
    }
} _PHYSICAL_MEMORY_DESCRIPTOR64;

typedef struct {
    uint64             P1Home <format=hex>;
    uint64             P2Home <format=hex>;
    uint64             P3Home <format=hex>;
    uint64             P4Home <format=hex>;
    uint64             P5Home <format=hex>;
    uint64             P6Home <format=hex>;
    
    uint32             ContextFlags <format=hex>;
    uint32             MxCsr <format=hex>;

    short              SegCs <format=hex>;
    short              SegDs <format=hex>;
    short              SegEs <format=hex>;
    short              SegFs <format=hex>;
    short              SegGs <format=hex>;
    short              SegSs <format=hex>;
    uint32             EFlags <format=hex>;

    uint64             Dr0 <format=hex>;
    uint64             Dr1 <format=hex>;
    uint64             Dr2 <format=hex>;
    uint64             Dr3 <format=hex>;
    uint64             Dr6 <format=hex>;
    uint64             Dr7 <format=hex>;

    uint64             Rax <format=hex>;
    uint64             Rcx <format=hex>;
    uint64             Rdx <format=hex>;
    uint64             Rbx <format=hex>;
    uint64             Rsp <format=hex>;
    uint64             Rbp <format=hex>;
    uint64             Rsi <format=hex>;
    uint64             Rdi <format=hex>;
    uint64             R8 <format=hex>;
    uint64             R9 <format=hex>;
    uint64             R10 <format=hex>;
    uint64             R11 <format=hex>;
    uint64             R12 <format=hex>;
    uint64             R13 <format=hex>;
    uint64             R14 <format=hex>;
    uint64             R15 <format=hex>;

    uint64             Rip <format=hex>;

    FSkip(928);
    uint64             VectorControl <format=hex>;

    uint64             DebugControl <format=hex>;
    uint64             LastBranchToRQp <format=hex>;
    uint64             LastBranchFromRQp <format=hex>;
    uint64             LastExceptQonToRQp <format=hex>;
    uint64             LastExceptQonFromRQp <format=hex>;
} _CONTEXT64;

typedef struct {
	int32				ExceptionCode <format=hex>;
	uint32				ExceptionFlags <format=hex>;
	uint64				ExceptionRecord;	
	uint64				ExceptionAddress <format=hex>;
	uint32				NumberParameters;
	FSkip(4);
	uint64				ExceptionInformation[15] <format=hex>;
} _EXCEPTION_RECORD64;


typedef struct {
	char				Signature[4];
	char				ValidDump[4];
	uint32				MajorVersion;
	uint32				MinorVersion;
	uint64				DirectoryTableBase <format=hex>;
	uint64				PfnDataBase <format=hex>;
	uint64				PsLoadedModuleList <format=hex>;
	uint64				PsActiveProcessHead <format=hex>;
	uint32				MachineImageType <format=hex>;
	uint32				NumberProcessors;
	uint32				BugCheckCode <format=hex>;
	FSkip(4);
	uint64				BugCheckParameter[4] <format=hex>;
//	FSeek ( 0x60 );
//	uchar				PaeEnabled;		// does that make any sense?
	FSeek( 0x80 );
	uint64				KdDebuggerDataBlock <format=hex>;
	_PHYSICAL_MEMORY_DESCRIPTOR64	PhysicalMemoryBlock;

	FSeek( 0xf98 );
	e_DumpType			DumpType;			
	FSeek( 0xfa0 );
	FILETIME			SystemUpTime;	// not really a FILETIME!
	FILETIME			SystemTime;	
	/* more to come, size is 0x2000 bytes */
} DUMP_HEADER64;

typedef struct {
    uint32 ServicePackBuild;
    uint32 SizeOfDump;
    uint32 ValidOffset <format=hex>;
    uint32 ContextOffset <format=hex>;
    uint32 ExceptionOffset <format=hex>;
    uint32 MmOffset <format=hex>;
    uint32 UnloadedDriversOffset <format=hex>;
    uint32 PrcbOffset <format=hex>;
    uint32 ProcessOffset <format=hex>;
    uint32 ThreadOffset <format=hex>;
    uint32 CallStackOffset <format=hex>;
    uint32 SizeOfCallStack;
    uint32 DriverListOffset <format=hex>;
    uint32 DriverCount;
    uint32 StringPoolOffset <format=hex>;
    uint32 StringPoolSize;
    uint32 BrokenDriverOffset <format=hex>;
    uint32 TriageOptions;
    uint64 TopOfStack <format=hex>;
    FSkip(32);
    uint32 DebuggerDataOffset <format=hex>;
    uint32 DebuggerDataSize;
    uint32 DataBlocksOffset <format=hex>;
    uint32 DataBlocksCountuint32;
} TRIAGE_DUMP_HEADER64;

// ===================================================================

typedef struct {
    short               Length;
    short               MaxLength;
    uint32              Reserved;
    wchar_t             DriverName[12];
    uint32              StartAddress <format=hex>;
    uint32              EndAddress <format=hex>;

} UNLOADED_DRIVER_ENTRY32;

typedef struct {
    short               Length;
    short               MaxLength;
    uint32              __unusedAlignment;
    uint64              Reserved;
    wchar_t             DriverName[12];
    uint64              StartAddress <format=hex>;
    uint64              EndAddress <format=hex>;
} UNLOADED_DRIVER_ENTRY64;

typedef struct {
    uint32              NumberOfEntries;
    UNLOADED_DRIVER_ENTRY32     Entries[NumberOfEntries];
} UNLOADED_DRIVERS32;


typedef struct {
    uint32              NumberOfEntries;
    uint32          	__unusedAlignment;
    UNLOADED_DRIVER_ENTRY64     Entries[NumberOfEntries];
} UNLOADED_DRIVERS64;

typedef struct {
    uint32              NameOffset <format=hex>;
    uchar               Reserved0[24];
    uint32              DllBase <format=hex>;
    uint32              EntryPoint <format=hex>;
    uint32              SizeOfImage <format=hex>;
    uchar               Reserved1[32];
    uint32              TimeDateStamp <format=hex>;
} DRIVER_ENTRY32;


typedef struct {
    uint32              NameOffset <format=hex>;
    uchar               Reserved0[52];
    uint64              DllBase <format=hex>;
    uint64              EntryPoint <format=hex>;
    uint64              SizeOfImage <format=hex>;
    uchar               Reserved1[56];
    uint64              TimeDateStamp <format=hex>;
} DRIVER_ENTRY64;

// ===================================================================

typedef struct {
    uint32              Length;
    wchar_t             Name[Length];
} NAME_STRING;

typedef struct _STRING_POOL(int DriverCount)
{
	local ULONG ulIndex=0;
	for (ulIndex=0; ulIndex < DriverCount; ulIndex++)
	{
		FSeek(DriverList[ulIndex].NameOffset);
		NAME_STRING 	Name;
	}
} STRING_POOL;

// ===================================================================
// Code

local char magic[8];
ReadBytes(magic, 0, 8);
if (Strncmp(magic, "PAGEDUMP", 8) == 0) {
	FSeek(0);
	DUMP_HEADER32			Hdr32;
	FSeek(0x1000);
	TRIAGE_DUMP_HEADER32	TriageHdr32;

	FSeek(TriageHdr32.ContextOffset);
	_CONTEXT32			Context;

	FSeek(TriageHdr32.ExceptionOffset);
	_EXCEPTION_RECORD32		Exception;

	FSeek(TriageHdr32.CallStackOffset);
	uint32	CallStack[TriageHdr32.SizeOfCallStack/4] <format=hex>;

	FSeek(TriageHdr32.UnloadedDriversOffset);
	UNLOADED_DRIVERS32		UnloadedDrivers;
	
	FSeek(TriageHdr32.DriverListOffset);
	DRIVER_ENTRY32			DriverList[TriageHdr32.DriverCount];

	STRING_POOL StringPool(TriageHdr32.DriverCount);

} else if (Strncmp(magic, "PAGEDU64", 8) == 0) {
	FSeek(0);
	DUMP_HEADER64			Hdr64;
	FSeek(0x2000);
	TRIAGE_DUMP_HEADER64	TriageHdr64;

	FSeek(TriageHdr64.ContextOffset);
	_CONTEXT64			Context;

	FSeek(TriageHdr64.ExceptionOffset);
	_EXCEPTION_RECORD64		Exception;

	FSeek(TriageHdr64.CallStackOffset);
	uint64	CallStack[TriageHdr64.SizeOfCallStack/8] <format=hex>;
	
	FSeek(TriageHdr64.UnloadedDriversOffset);
	UNLOADED_DRIVERS64		UnloadedDrivers;

	FSeek(TriageHdr64.DriverListOffset);
	DRIVER_ENTRY64			DriverList[TriageHdr64.DriverCount];

	STRING_POOL StringPool(TriageHdr64.DriverCount);

};